
/*
______________________________________________________________________________________________________________________________________________________________________________________________________|
|‚úÖ Tabela Comparativa dos Usos de const em C++                                                                                                                                                      |
|_____________________________________________________________________________________________________________________________________________________________________________________________________|
|Uso							|Exemplo de Sintaxe				|Significado														|Observa√ß√µes                                                      |
|_______________________________|_______________________________|___________________________________________________________________|_________________________________________________________________|
|1 -Constante local				|const int x = 10;				|x √© constante e n√£o pode ser alterado ap√≥s inicializa√ß√£o.			|Usado para valores imut√°veis.                                    |
|2a-Constante de classe			|static const int MAX = 100;	|Constante compartilhada entre objetos da classe.					|Pode ser usada como valor fixo ou para array est√°tico.           |
|2b-Fun√ß√£o constante			|void  mostrar() const;			|N√£o modifica o estado do obj (nenhuma var membro pode ser alterada).|Pode ser chamada por objetos const.                             |
|2c-Membro constante			|const int idade;				|Um membro constante deve ser inicializado no construtor.			|S√≥ pode ser inicializado via lista de inicializa√ß√£o.             |
|3 -Objeto constante			|const Pessoa p("Jo√£o", 30);	|p n√£o pode modificar nenhum membro n√£o-const.						|S√≥ m√©todos marcados como const podem ser chamados.               |
|4a-Const Argument (by value)	|void func(const int x)			|Dentro da fun√ß√£o, x n√£o pode ser alterado.							|Protege contra modifica√ß√µes acidentais.                          |
|4b-Const Argument (by ref) 	|void func(const std::string& s)|s √© passado por refer√™ncia mas n√£o pode ser alterado.				|Evita c√≥pias e garante seguran√ßa.                                |
|5a-Pointer to constant 		|const int* ptr = &x;			|O valor apontado n√£o pode ser alterado via ptr, mas ptr pode apontar p/ outro local.	"Conte√∫do constante".                         |
|5b-Pointer constant			|int*  const ptr = &x;			|O ptr n√£o pode apontar p outro end., mas o valor apontado pode ser alterado.	"Endere√ßo constante".                                 |
|5c-Pointer constant constant	|const int* const ptr = &x;		|Nem o valor apontado nem o ponteiro podem ser alterados.			|Totalmente imut√°vel.                                             |
|6 -Retorno de fun√ß√£o constante	|const string& getNome() const;	|Retorna uma refer√™ncia constante (n√£o modific√°vel).				|Evita c√≥pia e protege contra modifica√ß√£o externa.                |
|7 -Const em template			|template <const int N>			|Usa um valor constante como par√¢metro de template.					|Usado para metaprograma√ß√£o e tamanho fixo de arrays.             |
|8 -constexpr (relacionado)		|constexpr int f(int x){return x;}|	Avaliado em tempo de compila√ß√£o (compile-time).					|Uma vers√£o mais forte de const. Pode ser usada para otimiza√ß√µes e metaprograma√ß√£o.
|_______________________________|___________________________________________________________________________________________________|__________________________________________________________________________________
*/

/*
üí° Dicas √∫teis:
	-Sempre que voc√™ n√£o quiser que algo seja modificado, pense em usar const.
	-Ao passar strings, use const std::string& para evitar c√≥pias desnecess√°rias.
	-Em C++ moderno, prefira constexpr quando souber que o valor pode ser determinado em tempo de compila√ß√£o.
*/