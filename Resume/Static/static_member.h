#pragma once
#pragma once
#include <iostream>
#include <string>

/*
üîç Explica√ß√£o R√°pida
	-static int totalPessoas;: pertence √† classe, n√£o ao objeto.
	-static n√£o pode acessar membros n√£o-est√°ticos diretamente.
	-√â ideal para contadores, configura√ß√µes globais, inst√¢ncia √∫nica, etc.
	-√â necess√°rio inicializar o membro est√°tico fora da classe.
*/
class PessoaStatic {
private:
	std::string nome;
	int idade;

	// Membro est√°tico: compartilhado por todas as inst√¢ncias da classe
	static int totalPessoas;

public:
	// Construtor
	PessoaStatic(std::string n, int i) {
		nome = n;
		idade = i;
		totalPessoas++;  // Incrementa o contador toda vez que um objeto √© criado
	}

	// Destrutor
	~PessoaStatic() {
		totalPessoas--;  // Decrementa o contador quando o objeto √© destru√≠do
	}

	// M√©todo para exibir os dados do objeto
	void exibir() const {
		std::cout << "Nome: " << nome << ", Idade: " << idade << std::endl;
	}

	// M√©todo est√°tico: pode ser chamado sem criar objeto
	static int getTotalPessoas() {
		return totalPessoas;
	}
};

// (Necess√°rio) Inicializa√ß√£o do membro est√°tico fora da classe
int PessoaStatic::totalPessoas = 0;

// **************<<_USAGE_>>****************
static void _static_memberUsage() {
	std::cout << "Total de pessoas: " << PessoaStatic::getTotalPessoas() << "\n"; // 0

	PessoaStatic p1("Ana", 25);
	PessoaStatic p2("Bruno", 32);

	p1.exibir();
	p2.exibir();

	std::cout << "Total de pessoas: " << PessoaStatic::getTotalPessoas() << "\n"; // 2

	{
		PessoaStatic p3("Carlos", 40);
		p3.exibir();
		std::cout << "Total de pessoas: " << PessoaStatic::getTotalPessoas() << "\n"; // 3
	} // p3 sai de escopo aqui

	std::cout << "Total de pessoas: " << PessoaStatic::getTotalPessoas() << "\n"; // 2
}