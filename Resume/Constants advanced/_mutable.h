#pragma once
#pragma once
#include <iostream>
#include <string>
/*
üß† Conceito:
	const em um m√©todo indica que nenhum membro pode ser modificado.
	mutable anula essa restri√ß√£o, permitindo a modifica√ß√£o de certos membros mesmo em m√©todos const.
*/
class Usuario {
private:
	std::string nome;
	mutable int acessos; // Pode ser modificado mesmo em m√©todos const

public:
	// Construtor
	Usuario(const std::string& nomeUsuario) : nome(nomeUsuario), acessos(0) {}

	// M√©todo const que modifica o membro mutable
	void exibirNome() const {
		acessos++; // permitido por ser mutable
		std::cout << "Usu√°rio: " << nome << " (Acessos: " << acessos << ")\n";
	}
	// Retorna o n√∫mero de acessos (tamb√©m const)
	int getAcessos() const {
		return acessos;
	}
};

static void _mutable() {
	const Usuario usuario("Alice");

	// Mesmo sendo const, podemos chamar m√©todos que alteram membros mutable
	usuario.exibirNome();
	usuario.exibirNome();

	std::cout << "Total de acessos: " << usuario.getAcessos() << "\n";
}
/*
üìù Conclus√£o:
	mutable √© √∫til para:
		-Contadores de acesso
		-Caches internos
		-Flags de lazy evaluation
		-Preserve a imutabilidade l√≥gica sem abrir m√£o da flexibilidade.
*/
