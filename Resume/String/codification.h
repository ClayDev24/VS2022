#pragma once
#include <iostream>
#include <string>
#include <vector>
#include <fstream>
// Para fun√ß√µes seguras com verifica√ß√£o
#include "..\..\utfcpp\source\utf8\checked.h"
// Para fun√ß√µes mais r√°pidas, sem verifica√ß√£o
//#include "..\..\utfcpp\source\utf8\unchecked.h"
/*
Internacionaliza√ß√£o e Codifica√ß√£o com std::string
üåç 3.1 O problema dos acentos e caracteres especiais
Por padr√£o, std::string n√£o entende codifica√ß√µes como UTF-8, UTF-16 etc.
	Ela trata tudo como sequ√™ncia de bytes (char), o que pode causar
	confus√µes com caracteres como √©, √ß, √£ etc.
*/

namespace resume {

	static void _codification() {

		std::string palavra = "a√ß√£o";  // Pode conter 5 bytes, mas s√≥ 4 "letras"
		std::cout << palavra.length(); // Retorn 6, n√£o 4
		// Motivo: Letras com acento s√£o representadas por m√∫ltiplos byte no UTF-8

	// Solu√ß√µes: Usar wstring (wide string):
		std::wstring palavra_wide = L"a√ß√£o";
		std::wcout << L"Palavra: " << palavra_wide << L'\n';
		// std::wstring n√£o √© compat√≠vel com UTF-8 diretamente.
		// Ideal usar com codifica√ß√µes UTF-16/UTF-32 (Windows).

	}
	static int _utf8() {
		// Texto em UTF-8 com acentua√ß√£o
		std::string utf8_text = u8"Ol√°, mundo! √ß √£ √©"; // 17 chars

		// Verificar se √© uma string UTF-8 v√°lida
		if (utf8::is_valid(utf8_text.begin(), utf8_text.end())) {
			std::cout << "‚úÖ Texto UTF-8 v√°lido: " << utf8_text << "\n";
		}
		else {
			std::cerr << "‚ùå Texto UTF-8 inv√°lido!\n";
			return 1;
		}

		// Contar caracteres Unicode (n√£o bytes!)
		int char_count = utf8::distance(utf8_text.begin(), utf8_text.end());
		std::cout << "N√∫mero de caracteres Unicode: " << char_count << "\n";
		std::cout << "utf8_text.length()          : " << utf8_text.length() << std::endl;

		// Iterar caractere por caractere
		std::cout << "Caractere por caractere:\n";
		for (auto it = utf8_text.begin(); it != utf8_text.end();) {
			uint32_t cp = utf8::next(it, utf8_text.end());
			std::cout << "U+" << std::hex << cp << " ";
		}
		std::cout << "\n";

		// Codificar c√≥digo Unicode manualmente
		std::vector<uint8_t> encoded;
		utf8::append(0x20AC, std::back_inserter(encoded)); // Euro (‚Ç¨)
		std::string euro_str(encoded.begin(), encoded.end());
		std::cout << "S√≠mbolo do Euro codificado: " << euro_str << "\n";

		return 0;
	}

} // resume