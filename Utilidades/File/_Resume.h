#pragma once
/*
üìå 1. Informa√ß√µes Gerais do Arquivo
	Essas fun√ß√µes extraem metadados ou estat√≠sticas do arquivo:
		-Fun√ß√£o sugerida				Descri√ß√£o
		bool exists() const				Verifica se o arquivo existe.
		std::size_t getCharCount()		Retorna o n√∫mero total de caracteres.
		std::size_t getWordCount()		Retorna o n√∫mero total de palavras.
		std::size_t getLineCount()		J√° implementada: retorna o n√∫mero total de linhas.
		std::size_t getByteSize()		J√° implementada: retorna o tamanho do arquivo em bytes.
		std::time_t getLastModified()	Retorna a data de modifica√ß√£o do arquivo (usando <filesystem>).
		std::string getFileNameOnly()	Retorna apenas o nome sem extens√£o.
		std::string getExtension()		Retorna a extens√£o do arquivo (ex: .txt).
		std::string getAbsolutePath()	Retorna o caminho absoluto (via <filesystem>).

üîç 2. Leitura e Busca
	Fun√ß√µes para leitura e an√°lise de conte√∫do:
		-Fun√ß√£o sugerida											Descri√ß√£o
		std::string getLine(int index)								Retorna a linha espec√≠fica do arquivo.
		std::vector<std::string> getLines()							Retorna todas as linhas.
		int findLineNumberContaining(std::string palavra)			Retorna o n√∫mero da linha onde uma palavra aparece.
		std::vector<int> findAllLineNumbers(std::string palavra)	Todas as linhas onde aparece.
		bool contains(std::string palavra)							Verifica se a palavra aparece em alguma linha.
		std::string getFirstNonEmptyLine()							Retorna a primeira linha n√£o vazia.
		std::vector<std::string> getEmptyLines()					Retorna todas as linhas vazias.

üßπ 3. Limpeza e Filtros
		-Fun√ß√£o sugerida							Descri√ß√£o
		void removeEmptyLines()						Remove linhas vazias da mem√≥ria (vetor de strings).
		void removeLinesContaining(std::string s)	Remove todas as linhas que contenham determinada string.
		void toUpperCase()							Transforma todo o conte√∫do em mai√∫sculas.
		void toLowerCase()							Transforma todo o conte√∫do em min√∫sculas.
		void trimAllLines()							Remove espa√ßos em branco no in√≠cio e fim de todas as linhas.

‚úçÔ∏è 4. Escrita e Atualiza√ß√£o
		-Fun√ß√£o sugerida							Descri√ß√£o
		void overwriteLine(int i, std::string nova)	Substitui o conte√∫do de uma linha espec√≠fica.
		void appendLine(std::string novaLinha)		Adiciona uma nova linha ao final do arquivo.
		void insertLineAt(int i, std::string nova)	Insere linha na posi√ß√£o i.
		void save()									Salva o conte√∫do atualizado no arquivo original.
		void saveAs(std::string novoArquivo)		Salva em um novo arquivo.

‚öôÔ∏è 5. Fun√ß√µes com Express√µes Regulares (regex)
	(Mais poderosas, exigem #include <regex>)

		-Fun√ß√£o sugerida														Descri√ß√£o
		std::vector<std::string> findLinesMatchingRegex(std::string pattern)	Filtra linhas por padr√£o regex.
		bool matchLineRegex(int linha, std::string pattern)						Verifica se uma linha espec√≠fica bate com um regex.

üìÅ 6. Suporte a m√∫ltiplos arquivos (extra)
	Voc√™ pode expandir CFile ou criar uma classe MultiFileManager para gerenciar m√∫ltiplos arquivos.

		-Fun√ß√£o sugerida																		Descri√ß√£o
		static std::vector<std::string> listFilesInFolder(std::string path)						Retorna os arquivos de um diret√≥rio usando <filesystem>.
		static std::vector<std::string> readMultipleFiles(std::vector<std::string> arquivos)	L√™ m√∫ltiplos arquivos.

üîí 7. Seguran√ßa e Robustez
		-Fun√ß√£o sugerida	Descri√ß√£o
		bool isReadable()	Verifica se o arquivo pode ser lido.
		bool isWritable()	Verifica se o arquivo pode ser escrito.
		bool isEmpty()		Verifica se o arquivo est√° vazio.
*/